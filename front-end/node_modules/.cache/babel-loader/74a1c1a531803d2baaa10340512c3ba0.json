{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/Desktop/Projet Code/Ouieqare-MERN - Copie/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Projet Code\\\\Ouieqare-MERN - Copie\\\\front-end\\\\src\\\\views\\\\examples\\\\Clients.js\",\n    _s = $RefreshSig$();\n\nimport { useHistory } from \"react-router-dom\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button //ButtonGroup,\n, CardBody, Card //Col,\n, CardHeader, Container, Row } from \"reactstrap\"; //import ReactToPrint from \"react-to-print\";\n\nimport { useDropzone } from 'react-dropzone';\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\"; //import ReactBSAlert from \"react-bootstrap-sweetalert\";\n\nimport Header from \"components/Headers/Header.js\"; //import { dataTable } from \"variables/general\";\n\nvar formatDate = function formatDate(isoString) {\n  if (!isoString) return '';\n  var date = new Date(isoString);\n  return date.toLocaleDateString('fr-FR'); // ou 'en-US' selon le format local que vous préférez\n};\n\nvar fetchClients = function fetchClients(setClients) {\n  // Pass setClients as a parameter\n  var token = localStorage.getItem('token');\n\n  if (!token) {\n    console.error('Token not found in localStorage');\n    return;\n  }\n\n  var cleanToken = token.trim();\n  var formattedToken = cleanToken.replace('JWT ', '');\n  console.log(\"Formatted Token from localStorage:\", formattedToken);\n  fetch('http://localhost:5100/api/clients', {\n    headers: {\n      'Authorization': \"Bearer \".concat(formattedToken)\n    }\n  }).then(function (response) {\n    if (!response.ok) {\n      throw new Error(\"HTTP status \".concat(response.status));\n    }\n\n    return response.json();\n  }).then(function (data) {\n    console.log('Clients fetched:', data);\n    setClients(data); // Ensure this line is uncommented and correctly used\n  }).catch(function (err) {\n    console.error('Error fetching clients:', err.message);\n  });\n};\n\nvar Tables = function Tables() {\n  _s();\n\n  //const [modal, setModal] = useState(false);\n  //const toggleModal = () => setModal(!modal);\n  var history = useHistory();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      clients = _useState2[0],\n      setClients = _useState2[1];\n\n  var componentRef = useRef(null); //const inputFileRef = useRef(null);\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modal = _useState4[0],\n      setModal = _useState4[1];\n\n  var toggleModal = function toggleModal() {\n    setModal(!modal);\n\n    if (modal) {\n      // Si le modal est en train de se fermer\n      setIsUploading(false);\n      setUploadSuccess(false);\n      setUploadError(\"\");\n    }\n  };\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isUploading = _useState6[0],\n      setIsUploading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      uploadSuccess = _useState8[0],\n      setUploadSuccess = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      uploadError = _useState10[0],\n      setUploadError = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedFile = _useState12[0],\n      setSelectedFile = _useState12[1];\n\n  var handleAddClient = function handleAddClient() {\n    console.log('Redirection to /admin/nouveauClient');\n    history.push('/admin/nouveauClient');\n  };\n\n  var columns = [{\n    dataField: \"id\",\n    text: \"ID\",\n    hidden: true\n  }, {\n    dataField: \"nom\",\n    text: \"Nom\"\n  }, {\n    dataField: \"prenom\",\n    text: \"Prénom\"\n  }, {\n    dataField: \"email\",\n    text: \"Email\"\n  }, {\n    dataField: \"telephonePortable\",\n    text: \"Téléphone Portable\"\n  }, {\n    dataField: \"ville\",\n    text: \"Ville\"\n  }, {\n    dataField: \"dateNaissance\",\n    text: \"Date de Naissance\",\n    formatter: function formatter(cellContent, row) {\n      return formatDate(row.dateNaissance); // Formate la date avant de l'afficher\n    }\n  }, {\n    dataField: 'actions',\n    text: 'Actions',\n    formatter: function formatter(cell, row) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        color: \"primary\",\n        size: \"sm\",\n        onClick: function onClick() {\n          return handleEditClient(row);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-pencil-alt\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }\n      })), ' ', /*#__PURE__*/React.createElement(Button, {\n        color: \"danger\",\n        size: \"sm\",\n        onClick: function onClick() {\n          return handleDeleteClient(row._id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"fas fa-trash\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 15\n        }\n      })));\n    }\n  }]; // Fonction pour gérer la modification des clients\n\n  var handleEditClient = function handleEditClient(client) {\n    history.push({\n      pathname: '/admin/nouveauClient',\n      state: {\n        client: client\n      }\n    });\n  }; // Fonction pour gérer la suppression des clients\n\n\n  var handleDeleteClient = function handleDeleteClient(clientId) {\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer ce client ?\")) {\n      fetch(\"http://localhost:5100/api/clients/\".concat(clientId), {\n        method: 'DELETE',\n        headers: {\n          'Authorization': \"Bearer \".concat(localStorage.getItem('token').trim().replace('JWT ', ''))\n        }\n      }).then(function (response) {\n        if (!response.ok) {\n          throw new Error('Failed to delete client');\n        }\n\n        return response.json(); // Assurez-vous que le serveur renvoie une réponse JSON\n      }).then(function (data) {\n        if (data.success) {\n          setClients(function (prevClients) {\n            return prevClients.filter(function (client) {\n              return client._id !== clientId;\n            });\n          }); // ou utilisez une autre méthode de mise à jour de l'état si vous utilisez un autre état global comme Redux\n        } else {\n          console.error('Failed to delete client:', data.message);\n        }\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    }\n  }; // const handleFileUpload = (event) => {\n  //   const file = event.target.files[0];\n  //   if (file) {\n  //     const reader = new FileReader();\n  //     reader.onload = (e) => {\n  //       const text = e.target.result;\n  //       // Convertir CSV en JSON ici ou envoyer le texte brut au serveur pour traitement\n  //       uploadData(text);\n  //     };\n  //     reader.readAsText(file);\n  //   }\n  // };\n  // const uploadData = (data) => {\n  //   fetch('http://localhost:5100/api/clients/import', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //       'Authorization': `Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}`\n  //     },\n  //     body: JSON.stringify({ data })\n  //   })\n  //   .then(response => response.json())\n  //   .then(data => {\n  //     console.log(\"Import success:\", data);\n  //     fetchClients(setClients);  // Rafraîchir la liste des clients après l'import\n  //   })\n  //   .catch(err => console.error(\"Import error:\", err));\n  // };\n  // // Ajouter un bouton et input dans le JSX\n\n\n  var handleFileUpload = function handleFileUpload(files) {\n    if (!selectedFile) return;\n    var file = files[0];\n    if (!file) return;\n    setIsUploading(true);\n    setUploadSuccess(false);\n    setUploadError(\"\");\n    var formData = new FormData();\n    formData.append('file', file);\n    fetch('http://localhost:5100/api/clients/import', {\n      method: 'POST',\n      headers: {\n        'Authorization': \"Bearer \".concat(localStorage.getItem('token').trim().replace('JWT ', ''))\n      },\n      body: formData\n    }).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Échec de l\\'importation');\n      }\n    }).then(function (data) {\n      console.log(\"Import success:\", data);\n      fetchClients(setClients); // Refresh the client list after import\n\n      setIsUploading(false);\n      setUploadSuccess(true);\n      setSelectedFile(null);\n      toggleModal(); // Optionally close the modal after upload\n    }).catch(function (err) {\n      console.error(\"Import error:\", err);\n      setIsUploading(false);\n      setUploadError(\"Erreur lors de l'importation: \" + err.message);\n      setSelectedFile(null);\n    });\n  };\n\n  var pagination = paginationFactory({\n    page: 1,\n    alwaysShowAllBtns: true,\n    //showTotal: true,\n    withFirstAndLast: false,\n    sizePerPageRenderer: function sizePerPageRenderer(_ref) {\n      var options = _ref.options,\n          currSizePerPage = _ref.currSizePerPage,\n          onSizePerPageChange = _ref.onSizePerPageChange;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"dataTables_length\",\n        id: \"datatable-basic_length\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"select\", {\n        name: \"datatable-basic_length\",\n        \"aria-controls\": \"datatable-basic\",\n        className: \"form-control form-control-sm\",\n        onChange: function onChange(e) {\n          return onSizePerPageChange(e.target.value);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"10\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }\n      }, \"10\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"25\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 15\n        }\n      }, \"25\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"50\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }\n      }, \"50\"), /*#__PURE__*/React.createElement(\"option\", {\n        value: \"100\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }\n      }, \"100\")), \" \"));\n    }\n  });\n  var SearchBar = Search.SearchBar;\n  useEffect(function () {\n    fetchClients(setClients); // Pass setClients here\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: function onDrop(acceptedFiles) {\n      console.log(acceptedFiles);\n      setSelectedFile(acceptedFiles[0]); // Assurez-vous que c'est bien un fichier\n\n      setUploadSuccess(false);\n      setUploadError(\"\");\n    }\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps,\n      isDragActive = _useDropzone.isDragActive;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: \"mt--7\",\n    fluid: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"shadow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-0 d-flex align-items-center justify-content-between\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"mb-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 3\n    }\n  }, \"Clients\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: handleAddClient,\n    style: {\n      marginRight: '10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }\n  }, \"Ajouter Client\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"info\",\n    onClick: toggleModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }\n  }, \"Importer Clients\"))), /*#__PURE__*/React.createElement(CardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ToolkitProvider, {\n    keyField: \"id\",\n    data: clients,\n    columns: columns,\n    search: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 15\n    }\n  }, function (props) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(SearchBar, Object.assign({}, props.searchProps, {\n      style: {\n        border: '1px solid black'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        overflowX: 'auto'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({}, props.baseProps, {\n      ref: componentRef,\n      bootstrap4: true,\n      pagination: pagination,\n      bordered: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 23\n      }\n    }))));\n  })))))), /*#__PURE__*/React.createElement(Modal, {\n    isOpen: modal,\n    toggle: toggleModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggleModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 3\n    }\n  }, \"Importer des fichiers\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps({\n    className: 'dropzone'\n  }), {\n    style: {\n      border: '2px dashed #007bff',\n      padding: '20px',\n      textAlign: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-file-upload fa-2x\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }\n  }, \"Formats support\\xE9s : .csv, .xlsx\"), isDragActive ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }\n  }, \"Rel\\xE2chez le fichier ici...\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 9\n    }\n  }, \"Glissez-d\\xE9posez des fichiers ici, ou cliquez pour s\\xE9lectionner des fichiers\"), isUploading && /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 23\n    }\n  }, \"Chargement...\"), uploadSuccess && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-success\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  }, \"Fichier import\\xE9 avec succ\\xE8s!\"), uploadError && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-danger\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 23\n    }\n  }, uploadError))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: handleFileUpload,\n    disabled: !selectedFile,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 3\n    }\n  }, \"OK\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    onClick: toggleModal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 3\n    }\n  }, \"Fermer\"))));\n};\n\n_s(Tables, \"Z/pmissvevAsr8E2Q//QMc2fikg=\", false, function () {\n  return [useHistory, useDropzone];\n});\n\n_c = Tables;\nexport default Tables; // import { useHistory } from \"react-router-dom\";\n// import React, { useState, useRef, useEffect } from \"react\";\n// import {\n//   Button,\n//   //ButtonGroup,\n//   CardBody,\n//   Card,\n//   //Col,\n//   CardHeader,\n//   Container,\n//   Row,\n// } from \"reactstrap\";\n// //import ReactToPrint from \"react-to-print\";\n// import BootstrapTable from \"react-bootstrap-table-next\";\n// import paginationFactory from \"react-bootstrap-table2-paginator\";\n// import ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\n// //import ReactBSAlert from \"react-bootstrap-sweetalert\";\n// import Header from \"components/Headers/Header.js\";\n// //import { dataTable } from \"variables/general\";\n// const formatDate = (isoString) => {\n//   if (!isoString) return '';\n//   const date = new Date(isoString);\n//   return date.toLocaleDateString('fr-FR');  // ou 'en-US' selon le format local que vous préférez\n// }\n// const fetchClients = (setClients) => { // Pass setClients as a parameter\n//   const token = localStorage.getItem('token');\n//   if (!token) {\n//       console.error('Token not found in localStorage');\n//       return;\n//   }\n//   const cleanToken = token.trim();\n//   const formattedToken = cleanToken.replace('JWT ', '');\n//   console.log(\"Formatted Token from localStorage:\", formattedToken);\n//   fetch('http://localhost:5100/api/clients', {\n//       headers: {\n//           'Authorization': Bearer ${formattedToken}\n//       }\n//   })\n//   .then(response => {\n//       if (!response.ok) {\n//           throw new Error(HTTP status ${response.status});\n//       }\n//       return response.json();\n//   })\n//   .then(data => {\n//       console.log('Clients fetched:', data);\n//       setClients(data); // Ensure this line is uncommented and correctly used\n//   })\n//   .catch(err => {\n//       console.error('Error fetching clients:', err.message);\n//   });\n// };\n// const Tables = () => {\n//   //const [modal, setModal] = useState(false);\n//   //const toggleModal = () => setModal(!modal);\n//   const history = useHistory();\n//   const [clients, setClients] = useState([]);\n//   const componentRef = useRef(null);\n//   const inputFileRef = useRef(null);\n// const handleAddClient = () => {\n//   console.log('Redirection to /admin/nouveauClient');\n//     history.push('/admin/nouveauClient');\n//   };\n//   const columns = [\n//     { dataField: \"id\", text: \"ID\", hidden: true },\n//     { dataField: \"nom\", text: \"Nom\" },\n//     { dataField: \"prenom\", text: \"Prénom\" },\n//     { dataField: \"email\", text: \"Email\" },\n//     { dataField: \"telephonePortable\", text: \"Téléphone Portable\" },\n//     { dataField: \"ville\", text: \"Ville\" },\n//     {\n//       dataField: \"dateNaissance\",\n//       text: \"Date de Naissance\",\n//       formatter: (cellContent, row) => {\n//         return formatDate(row.dateNaissance);  // Formate la date avant de l'afficher\n//       }\n//     },\n//     {\n//       dataField: 'actions',\n//       text: 'Actions',\n//       formatter: (cell, row) => {\n//         return (\n//           <div>\n//             <Button color=\"primary\" size=\"sm\" onClick={() => handleEditClient(row)}>\n//               <i className=\"fas fa-pencil-alt\" />\n//             </Button>\n//             {' '}\n//             <Button color=\"danger\" size=\"sm\" onClick={() => handleDeleteClient(row._id)}>\n//               <i className=\"fas fa-trash\" />\n//             </Button>\n//           </div>\n//         );\n//       }\n//     }\n//   ];\n//   // Fonction pour gérer la modification des clients\n//   const handleEditClient = (client) => {\n//     history.push({\n//       pathname: '/admin/nouveauClient',\n//       state: { client: client }\n//     });\n//   };\n//   // Fonction pour gérer la suppression des clients\n//   const handleDeleteClient = (clientId) => {\n//     if (window.confirm(\"Êtes-vous sûr de vouloir supprimer ce client ?\")) {\n//       fetch(http://localhost:5100/api/clients/${clientId}, {\n//         method: 'DELETE',\n//         headers: {\n//           'Authorization': Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}\n//         }\n//       })\n//       .then(response => {\n//         if (!response.ok) {\n//           throw new Error('Failed to delete client');\n//         }\n//         return response.json();  // Assurez-vous que le serveur renvoie une réponse JSON\n//       })\n//       .then(data => {\n//         if (data.success) {\n//           setClients(prevClients => prevClients.filter(client => client._id !== clientId));\n//           // ou utilisez une autre méthode de mise à jour de l'état si vous utilisez un autre état global comme Redux\n//         } else {\n//           console.error('Failed to delete client:', data.message);\n//         }\n//       })\n//       .catch(error => console.error('Error:', error));\n//     }\n//   };\n//   // const handleFileUpload = (event) => {\n//   //   const file = event.target.files[0];\n//   //   if (file) {\n//   //     const reader = new FileReader();\n//   //     reader.onload = (e) => {\n//   //       const text = e.target.result;\n//   //       // Convertir CSV en JSON ici ou envoyer le texte brut au serveur pour traitement\n//   //       uploadData(text);\n//   //     };\n//   //     reader.readAsText(file);\n//   //   }\n//   // };\n//   // const uploadData = (data) => {\n//   //   fetch('http://localhost:5100/api/clients/import', {\n//   //     method: 'POST',\n//   //     headers: {\n//   //       'Content-Type': 'application/json',\n//   //       'Authorization': Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}\n//   //     },\n//   //     body: JSON.stringify({ data })\n//   //   })\n//   //   .then(response => response.json())\n//   //   .then(data => {\n//   //     console.log(\"Import success:\", data);\n//   //     fetchClients(setClients);  // Rafraîchir la liste des clients après l'import\n//   //   })\n//   //   .catch(err => console.error(\"Import error:\", err));\n//   // };\n//   // // Ajouter un bouton et input dans le JSX\n//   const handleFileUpload = (event) => {\n//     const file = event.target.files[0];\n//     if (!file) return;\n//     const formData = new FormData();\n//     formData.append('file', file);\n//     fetch('http://localhost:5100/api/clients/import', {\n//         method: 'POST',\n//         headers: {\n//           'Authorization': Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}\n//         },\n//         body: formData\n//     })\n//     .then(response => response.json())\n//     .then(data => {\n//         console.log(\"Import success:\", data);\n//         fetchClients(setClients);  // Refresh the client list after import\n//     })\n//     .catch(err => console.error(\"Import error:\", err));\n// };\n//   const pagination = paginationFactory({\n//     page: 1,\n//     alwaysShowAllBtns: true,\n//     //showTotal: true,\n//     withFirstAndLast: false,\n//     sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\n//       <div className=\"dataTables_length\" id=\"datatable-basic_length\">\n//         <label>\n//           {\" \"}\n//           {\n//             <select\n//               name=\"datatable-basic_length\"\n//               aria-controls=\"datatable-basic\"\n//               className=\"form-control form-control-sm\"\n//               onChange={e => onSizePerPageChange(e.target.value)}\n//             >\n//               <option value=\"10\">10</option>\n//               <option value=\"25\">25</option>\n//               <option value=\"50\">50</option>\n//               <option value=\"100\">100</option>\n//             </select>\n//           }{\" \"}\n//         </label>\n//       </div>\n//     )\n//   });\n//   const { SearchBar } = Search;\n//   useEffect(() => {\n//     fetchClients(setClients); // Pass setClients here\n// }, []); \n//   return (\n//     <>\n//       <Header />\n//       <Container className=\"mt--7\" fluid>\n//         <Row>\n//           <div className=\"col\">\n//             <Card className=\"shadow\">\n//               <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\">\n//                 <h3 className=\"mb-0\">Clients</h3>\n//                 <input type=\"file\" onChange={handleFileUpload} accept=\".csv\" style={{ display: 'none' }} ref={inputFileRef} />\n// <Button color=\"info\" onClick={() => inputFileRef.current && inputFileRef.current.click()}>\n//   Importer Clients\n// </Button>\n//                 {/* <Button color=\"primary\" onClick={toggleModal}>Ajouter Client</Button> */}\n//                 <Button color=\"primary\" onClick={handleAddClient}>Ajouter Client</Button>\n//               </CardHeader>\n//               <CardBody>\n//                 <ToolkitProvider\n//                   keyField=\"id\"\n//                   data={clients}\n//                   columns={columns}\n//                   search\n//                 >\n//                   {props => (\n//                     <div>\n//                       <SearchBar {...props.searchProps} style={{ border: '1px solid black' }} />\n//                       <div style={{ overflowX: 'auto' }}>\n//                         <BootstrapTable\n//                           {...props.baseProps}\n//                           ref={componentRef}\n//                           bootstrap4\n//                           pagination={pagination}\n//                           bordered={false}\n//                         />\n//                       </div>\n//                     </div>\n//                   )}\n//                 </ToolkitProvider>\n//               </CardBody>\n//             </Card>\n//           </div>\n//         </Row>\n//       </Container>\n//       {/* <AddClientModal isOpen={modal} toggle={toggleModal} onSave={addNewClient} /> */}\n//     </>\n//   );\n// };\n// export default Tables;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tables\");","map":{"version":3,"sources":["C:/Users/user/Desktop/Projet Code/Ouieqare-MERN - Copie/front-end/src/views/examples/Clients.js"],"names":["useHistory","React","useState","useRef","useEffect","Modal","ModalHeader","ModalBody","ModalFooter","Button","CardBody","Card","CardHeader","Container","Row","useDropzone","BootstrapTable","paginationFactory","ToolkitProvider","Search","Header","formatDate","isoString","date","Date","toLocaleDateString","fetchClients","setClients","token","localStorage","getItem","console","error","cleanToken","trim","formattedToken","replace","log","fetch","headers","then","response","ok","Error","status","json","data","catch","err","message","Tables","history","clients","componentRef","modal","setModal","toggleModal","setIsUploading","setUploadSuccess","setUploadError","isUploading","uploadSuccess","uploadError","selectedFile","setSelectedFile","handleAddClient","push","columns","dataField","text","hidden","formatter","cellContent","row","dateNaissance","cell","handleEditClient","handleDeleteClient","_id","client","pathname","state","clientId","window","confirm","method","success","prevClients","filter","handleFileUpload","files","file","formData","FormData","append","body","pagination","page","alwaysShowAllBtns","withFirstAndLast","sizePerPageRenderer","options","currSizePerPage","onSizePerPageChange","e","target","value","SearchBar","onDrop","acceptedFiles","getRootProps","getInputProps","isDragActive","marginRight","props","searchProps","border","overflowX","baseProps","className","padding","textAlign"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA","sourcesContent":["import { useHistory } from \"react-router-dom\";\r\nimport React, { useState, useRef, useEffect } from \"react\";\r\nimport {\r\n  Modal, ModalHeader, ModalBody, ModalFooter,\r\n  Button,\r\n  //ButtonGroup,\r\n  CardBody,\r\n  Card,\r\n  //Col,\r\n  CardHeader,\r\n  Container,\r\n  Row,\r\n} from \"reactstrap\";\r\n//import ReactToPrint from \"react-to-print\";\r\nimport { useDropzone } from 'react-dropzone';\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\n//import ReactBSAlert from \"react-bootstrap-sweetalert\";\r\nimport Header from \"components/Headers/Header.js\";\r\n//import { dataTable } from \"variables/general\";\r\n\r\nconst formatDate = (isoString) => {\r\n  if (!isoString) return '';\r\n  const date = new Date(isoString);\r\n  return date.toLocaleDateString('fr-FR');  // ou 'en-US' selon le format local que vous préférez\r\n}\r\n\r\n\r\nconst fetchClients = (setClients) => { // Pass setClients as a parameter\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n      console.error('Token not found in localStorage');\r\n      return;\r\n  }\r\n\r\n  const cleanToken = token.trim();\r\n  const formattedToken = cleanToken.replace('JWT ', '');\r\n\r\n  console.log(\"Formatted Token from localStorage:\", formattedToken);\r\n\r\n  fetch('http://localhost:5100/api/clients', {\r\n      headers: {\r\n          'Authorization': `Bearer ${formattedToken}`\r\n      }\r\n  })\r\n  .then(response => {\r\n      if (!response.ok) {\r\n          throw new Error(`HTTP status ${response.status}`);\r\n      }\r\n      return response.json();\r\n  })\r\n  .then(data => {\r\n      console.log('Clients fetched:', data);\r\n      setClients(data); // Ensure this line is uncommented and correctly used\r\n  })\r\n  .catch(err => {\r\n      console.error('Error fetching clients:', err.message);\r\n  });\r\n};\r\n\r\n\r\nconst Tables = () => {\r\n  //const [modal, setModal] = useState(false);\r\n  //const toggleModal = () => setModal(!modal);\r\n  const history = useHistory();\r\n  const [clients, setClients] = useState([]);\r\n  const componentRef = useRef(null);\r\n  //const inputFileRef = useRef(null);\r\n  const [modal, setModal] = useState(false);\r\n  const toggleModal = () => {\r\n    setModal(!modal);\r\n    if (modal) { // Si le modal est en train de se fermer\r\n      setIsUploading(false);\r\n      setUploadSuccess(false);\r\n      setUploadError(\"\");\r\n    }\r\n  };\r\n  \r\nconst [isUploading, setIsUploading] = useState(false);\r\nconst [uploadSuccess, setUploadSuccess] = useState(false);\r\nconst [uploadError, setUploadError] = useState(\"\");\r\nconst [selectedFile, setSelectedFile] = useState(null);\r\n\r\n\r\n\r\n\r\n\r\n  \r\nconst handleAddClient = () => {\r\n  console.log('Redirection to /admin/nouveauClient');\r\n    history.push('/admin/nouveauClient');\r\n  };\r\n\r\n  const columns = [\r\n    { dataField: \"id\", text: \"ID\", hidden: true },\r\n    { dataField: \"nom\", text: \"Nom\" },\r\n    { dataField: \"prenom\", text: \"Prénom\" },\r\n    { dataField: \"email\", text: \"Email\" },\r\n    { dataField: \"telephonePortable\", text: \"Téléphone Portable\" },\r\n    { dataField: \"ville\", text: \"Ville\" },\r\n    {\r\n      dataField: \"dateNaissance\",\r\n      text: \"Date de Naissance\",\r\n      formatter: (cellContent, row) => {\r\n        return formatDate(row.dateNaissance);  // Formate la date avant de l'afficher\r\n      }\r\n    },\r\n    {\r\n      dataField: 'actions',\r\n      text: 'Actions',\r\n      formatter: (cell, row) => {\r\n        return (\r\n          <div>\r\n            <Button color=\"primary\" size=\"sm\" onClick={() => handleEditClient(row)}>\r\n              <i className=\"fas fa-pencil-alt\" />\r\n            </Button>\r\n            {' '}\r\n            <Button color=\"danger\" size=\"sm\" onClick={() => handleDeleteClient(row._id)}>\r\n              <i className=\"fas fa-trash\" />\r\n            </Button>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  ];\r\n  \r\n  // Fonction pour gérer la modification des clients\r\n  const handleEditClient = (client) => {\r\n    history.push({\r\n      pathname: '/admin/nouveauClient',\r\n      state: { client: client }\r\n    });\r\n  };\r\n  \r\n  // Fonction pour gérer la suppression des clients\r\n  const handleDeleteClient = (clientId) => {\r\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer ce client ?\")) {\r\n      fetch(`http://localhost:5100/api/clients/${clientId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Failed to delete client');\r\n        }\r\n        return response.json();  // Assurez-vous que le serveur renvoie une réponse JSON\r\n      })\r\n      .then(data => {\r\n        if (data.success) {\r\n          setClients(prevClients => prevClients.filter(client => client._id !== clientId));\r\n          // ou utilisez une autre méthode de mise à jour de l'état si vous utilisez un autre état global comme Redux\r\n        } else {\r\n          console.error('Failed to delete client:', data.message);\r\n        }\r\n      })\r\n      .catch(error => console.error('Error:', error));\r\n    }\r\n  };\r\n\r\n  // const handleFileUpload = (event) => {\r\n  //   const file = event.target.files[0];\r\n  //   if (file) {\r\n  //     const reader = new FileReader();\r\n  //     reader.onload = (e) => {\r\n  //       const text = e.target.result;\r\n  //       // Convertir CSV en JSON ici ou envoyer le texte brut au serveur pour traitement\r\n  //       uploadData(text);\r\n  //     };\r\n  //     reader.readAsText(file);\r\n  //   }\r\n  // };\r\n  \r\n  // const uploadData = (data) => {\r\n  //   fetch('http://localhost:5100/api/clients/import', {\r\n  //     method: 'POST',\r\n  //     headers: {\r\n  //       'Content-Type': 'application/json',\r\n  //       'Authorization': `Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}`\r\n  //     },\r\n  //     body: JSON.stringify({ data })\r\n  //   })\r\n  //   .then(response => response.json())\r\n  //   .then(data => {\r\n  //     console.log(\"Import success:\", data);\r\n  //     fetchClients(setClients);  // Rafraîchir la liste des clients après l'import\r\n  //   })\r\n  //   .catch(err => console.error(\"Import error:\", err));\r\n  // };\r\n  \r\n  // // Ajouter un bouton et input dans le JSX\r\n  \r\n  const handleFileUpload = (files) => {\r\n    if (!selectedFile) return;\r\n    const file = files[0];\r\n    if (!file) return;\r\n  \r\n    setIsUploading(true);\r\n    setUploadSuccess(false);\r\n    setUploadError(\"\");\r\n  \r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n  \r\n    fetch('http://localhost:5100/api/clients/import', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Authorization': `Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}`\r\n        },\r\n        body: formData\r\n    })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return response.json();\r\n      } else {\r\n        throw new Error('Échec de l\\'importation');\r\n      }\r\n    })\r\n    .then(data => {\r\n      console.log(\"Import success:\", data);\r\n      fetchClients(setClients);  // Refresh the client list after import\r\n      setIsUploading(false);\r\n      setUploadSuccess(true);\r\n      setSelectedFile(null);\r\n      toggleModal();  // Optionally close the modal after upload\r\n  })\r\n  .catch(err => {\r\n      console.error(\"Import error:\", err);\r\n      setIsUploading(false);\r\n      setUploadError(\"Erreur lors de l'importation: \" + err.message);\r\n      setSelectedFile(null);\r\n  });\r\n  };\r\n  \r\n  \r\n\r\n  const pagination = paginationFactory({\r\n    page: 1,\r\n    alwaysShowAllBtns: true,\r\n    //showTotal: true,\r\n    withFirstAndLast: false,\r\n    sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n      <div className=\"dataTables_length\" id=\"datatable-basic_length\">\r\n        <label>\r\n          {\" \"}\r\n          {\r\n            <select\r\n              name=\"datatable-basic_length\"\r\n              aria-controls=\"datatable-basic\"\r\n              className=\"form-control form-control-sm\"\r\n              onChange={e => onSizePerPageChange(e.target.value)}\r\n            >\r\n              <option value=\"10\">10</option>\r\n              <option value=\"25\">25</option>\r\n              <option value=\"50\">50</option>\r\n              <option value=\"100\">100</option>\r\n            </select>\r\n          }{\" \"}\r\n          \r\n        </label>\r\n      </div>\r\n    )\r\n  });\r\n\r\n  const { SearchBar } = Search;\r\n  useEffect(() => {\r\n    fetchClients(setClients); // Pass setClients here\r\n}, []); \r\nconst { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n  onDrop: acceptedFiles => {\r\n    console.log(acceptedFiles);\r\n    setSelectedFile(acceptedFiles[0]); // Assurez-vous que c'est bien un fichier\r\n    setUploadSuccess(false);\r\n    setUploadError(\"\");\r\n  }\r\n});\r\n\r\n\r\n\r\nreturn (\r\n  <>\r\n    <Header />\r\n    <Container className=\"mt--7\" fluid>\r\n      <Row>\r\n        <div className=\"col\">\r\n          <Card className=\"shadow\">\r\n          <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\">\r\n  <h3 className=\"mb-0\">Clients</h3>\r\n  <div>\r\n    <Button color=\"primary\" onClick={handleAddClient} style={{ marginRight: '10px' }}>Ajouter Client</Button>\r\n    <Button color=\"info\" onClick={toggleModal}>Importer Clients</Button>\r\n  </div>\r\n</CardHeader>\r\n\r\n            <CardBody>\r\n              <ToolkitProvider keyField=\"id\" data={clients} columns={columns} search>\r\n                {props => (\r\n                  <div>\r\n                    <SearchBar {...props.searchProps} style={{ border: '1px solid black' }} />\r\n                    <div style={{ overflowX: 'auto' }}>\r\n                      <BootstrapTable {...props.baseProps} ref={componentRef} bootstrap4 pagination={pagination} bordered={false} />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </ToolkitProvider>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </Row>\r\n    </Container>\r\n    <Modal isOpen={modal} toggle={toggleModal}>\r\n  <ModalHeader toggle={toggleModal}>Importer des fichiers</ModalHeader>\r\n  <ModalBody>\r\n    <div {...getRootProps({ className: 'dropzone' })} style={{ border: '2px dashed #007bff', padding: '20px', textAlign: 'center' }}>\r\n      <input {...getInputProps()} />\r\n      <i className=\"fas fa-file-upload fa-2x\"></i> {/* Icone de FontAwesome */}\r\n      {/* <p>Glissez-déposez des fichiers ici, ou cliquez pour sélectionner des fichiers.</p> */}\r\n      <p>Formats supportés : .csv, .xlsx</p>\r\n      {isDragActive ? (\r\n        <p>Relâchez le fichier ici...</p>\r\n      ) : (\r\n        <p>Glissez-déposez des fichiers ici, ou cliquez pour sélectionner des fichiers</p>\r\n      )}\r\n      {isUploading && <div>Chargement...</div>}\r\n      {uploadSuccess && <div className=\"alert alert-success\">Fichier importé avec succès!</div>}\r\n      {uploadError && <div className=\"alert alert-danger\">{uploadError}</div>}\r\n    </div>\r\n  </ModalBody>\r\n  <ModalFooter>\r\n  <Button color=\"primary\" onClick={handleFileUpload} disabled={!selectedFile}>\r\n    OK\r\n  </Button>\r\n  <Button color=\"secondary\" onClick={toggleModal}>Fermer</Button>\r\n</ModalFooter>\r\n\r\n</Modal>\r\n\r\n\r\n  </>\r\n);\r\n\r\n};\r\n\r\n\r\n\r\nexport default Tables;\r\n\r\n\r\n// import { useHistory } from \"react-router-dom\";\r\n// import React, { useState, useRef, useEffect } from \"react\";\r\n// import {\r\n//   Button,\r\n//   //ButtonGroup,\r\n//   CardBody,\r\n//   Card,\r\n//   //Col,\r\n//   CardHeader,\r\n//   Container,\r\n//   Row,\r\n// } from \"reactstrap\";\r\n// //import ReactToPrint from \"react-to-print\";\r\n// import BootstrapTable from \"react-bootstrap-table-next\";\r\n// import paginationFactory from \"react-bootstrap-table2-paginator\";\r\n// import ToolkitProvider, { Search } from \"react-bootstrap-table2-toolkit\";\r\n// //import ReactBSAlert from \"react-bootstrap-sweetalert\";\r\n// import Header from \"components/Headers/Header.js\";\r\n// //import { dataTable } from \"variables/general\";\r\n\r\n// const formatDate = (isoString) => {\r\n//   if (!isoString) return '';\r\n//   const date = new Date(isoString);\r\n//   return date.toLocaleDateString('fr-FR');  // ou 'en-US' selon le format local que vous préférez\r\n// }\r\n\r\n\r\n// const fetchClients = (setClients) => { // Pass setClients as a parameter\r\n//   const token = localStorage.getItem('token');\r\n//   if (!token) {\r\n//       console.error('Token not found in localStorage');\r\n//       return;\r\n//   }\r\n\r\n//   const cleanToken = token.trim();\r\n//   const formattedToken = cleanToken.replace('JWT ', '');\r\n\r\n//   console.log(\"Formatted Token from localStorage:\", formattedToken);\r\n\r\n//   fetch('http://localhost:5100/api/clients', {\r\n//       headers: {\r\n//           'Authorization': Bearer ${formattedToken}\r\n//       }\r\n//   })\r\n//   .then(response => {\r\n//       if (!response.ok) {\r\n//           throw new Error(HTTP status ${response.status});\r\n//       }\r\n//       return response.json();\r\n//   })\r\n//   .then(data => {\r\n//       console.log('Clients fetched:', data);\r\n//       setClients(data); // Ensure this line is uncommented and correctly used\r\n//   })\r\n//   .catch(err => {\r\n//       console.error('Error fetching clients:', err.message);\r\n//   });\r\n// };\r\n\r\n\r\n// const Tables = () => {\r\n//   //const [modal, setModal] = useState(false);\r\n//   //const toggleModal = () => setModal(!modal);\r\n//   const history = useHistory();\r\n//   const [clients, setClients] = useState([]);\r\n//   const componentRef = useRef(null);\r\n//   const inputFileRef = useRef(null);\r\n\r\n\r\n  \r\n// const handleAddClient = () => {\r\n//   console.log('Redirection to /admin/nouveauClient');\r\n//     history.push('/admin/nouveauClient');\r\n//   };\r\n\r\n//   const columns = [\r\n//     { dataField: \"id\", text: \"ID\", hidden: true },\r\n//     { dataField: \"nom\", text: \"Nom\" },\r\n//     { dataField: \"prenom\", text: \"Prénom\" },\r\n//     { dataField: \"email\", text: \"Email\" },\r\n//     { dataField: \"telephonePortable\", text: \"Téléphone Portable\" },\r\n//     { dataField: \"ville\", text: \"Ville\" },\r\n//     {\r\n//       dataField: \"dateNaissance\",\r\n//       text: \"Date de Naissance\",\r\n//       formatter: (cellContent, row) => {\r\n//         return formatDate(row.dateNaissance);  // Formate la date avant de l'afficher\r\n//       }\r\n//     },\r\n//     {\r\n//       dataField: 'actions',\r\n//       text: 'Actions',\r\n//       formatter: (cell, row) => {\r\n//         return (\r\n//           <div>\r\n//             <Button color=\"primary\" size=\"sm\" onClick={() => handleEditClient(row)}>\r\n//               <i className=\"fas fa-pencil-alt\" />\r\n//             </Button>\r\n//             {' '}\r\n//             <Button color=\"danger\" size=\"sm\" onClick={() => handleDeleteClient(row._id)}>\r\n//               <i className=\"fas fa-trash\" />\r\n//             </Button>\r\n//           </div>\r\n//         );\r\n//       }\r\n//     }\r\n//   ];\r\n  \r\n//   // Fonction pour gérer la modification des clients\r\n//   const handleEditClient = (client) => {\r\n//     history.push({\r\n//       pathname: '/admin/nouveauClient',\r\n//       state: { client: client }\r\n//     });\r\n//   };\r\n  \r\n//   // Fonction pour gérer la suppression des clients\r\n//   const handleDeleteClient = (clientId) => {\r\n//     if (window.confirm(\"Êtes-vous sûr de vouloir supprimer ce client ?\")) {\r\n//       fetch(http://localhost:5100/api/clients/${clientId}, {\r\n//         method: 'DELETE',\r\n//         headers: {\r\n//           'Authorization': Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}\r\n//         }\r\n//       })\r\n//       .then(response => {\r\n//         if (!response.ok) {\r\n//           throw new Error('Failed to delete client');\r\n//         }\r\n//         return response.json();  // Assurez-vous que le serveur renvoie une réponse JSON\r\n//       })\r\n//       .then(data => {\r\n//         if (data.success) {\r\n//           setClients(prevClients => prevClients.filter(client => client._id !== clientId));\r\n//           // ou utilisez une autre méthode de mise à jour de l'état si vous utilisez un autre état global comme Redux\r\n//         } else {\r\n//           console.error('Failed to delete client:', data.message);\r\n//         }\r\n//       })\r\n//       .catch(error => console.error('Error:', error));\r\n//     }\r\n//   };\r\n\r\n//   // const handleFileUpload = (event) => {\r\n//   //   const file = event.target.files[0];\r\n//   //   if (file) {\r\n//   //     const reader = new FileReader();\r\n//   //     reader.onload = (e) => {\r\n//   //       const text = e.target.result;\r\n//   //       // Convertir CSV en JSON ici ou envoyer le texte brut au serveur pour traitement\r\n//   //       uploadData(text);\r\n//   //     };\r\n//   //     reader.readAsText(file);\r\n//   //   }\r\n//   // };\r\n  \r\n//   // const uploadData = (data) => {\r\n//   //   fetch('http://localhost:5100/api/clients/import', {\r\n//   //     method: 'POST',\r\n//   //     headers: {\r\n//   //       'Content-Type': 'application/json',\r\n//   //       'Authorization': Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}\r\n//   //     },\r\n//   //     body: JSON.stringify({ data })\r\n//   //   })\r\n//   //   .then(response => response.json())\r\n//   //   .then(data => {\r\n//   //     console.log(\"Import success:\", data);\r\n//   //     fetchClients(setClients);  // Rafraîchir la liste des clients après l'import\r\n//   //   })\r\n//   //   .catch(err => console.error(\"Import error:\", err));\r\n//   // };\r\n  \r\n//   // // Ajouter un bouton et input dans le JSX\r\n  \r\n//   const handleFileUpload = (event) => {\r\n//     const file = event.target.files[0];\r\n//     if (!file) return;\r\n\r\n//     const formData = new FormData();\r\n//     formData.append('file', file);\r\n\r\n//     fetch('http://localhost:5100/api/clients/import', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Authorization': Bearer ${localStorage.getItem('token').trim().replace('JWT ', '')}\r\n//         },\r\n//         body: formData\r\n//     })\r\n//     .then(response => response.json())\r\n//     .then(data => {\r\n//         console.log(\"Import success:\", data);\r\n//         fetchClients(setClients);  // Refresh the client list after import\r\n//     })\r\n//     .catch(err => console.error(\"Import error:\", err));\r\n// };\r\n\r\n//   const pagination = paginationFactory({\r\n//     page: 1,\r\n//     alwaysShowAllBtns: true,\r\n//     //showTotal: true,\r\n//     withFirstAndLast: false,\r\n//     sizePerPageRenderer: ({ options, currSizePerPage, onSizePerPageChange }) => (\r\n//       <div className=\"dataTables_length\" id=\"datatable-basic_length\">\r\n//         <label>\r\n//           {\" \"}\r\n//           {\r\n//             <select\r\n//               name=\"datatable-basic_length\"\r\n//               aria-controls=\"datatable-basic\"\r\n//               className=\"form-control form-control-sm\"\r\n//               onChange={e => onSizePerPageChange(e.target.value)}\r\n//             >\r\n//               <option value=\"10\">10</option>\r\n//               <option value=\"25\">25</option>\r\n//               <option value=\"50\">50</option>\r\n//               <option value=\"100\">100</option>\r\n//             </select>\r\n//           }{\" \"}\r\n          \r\n//         </label>\r\n//       </div>\r\n//     )\r\n//   });\r\n\r\n//   const { SearchBar } = Search;\r\n//   useEffect(() => {\r\n//     fetchClients(setClients); // Pass setClients here\r\n// }, []); \r\n\r\n\r\n//   return (\r\n//     <>\r\n//       <Header />\r\n//       <Container className=\"mt--7\" fluid>\r\n//         <Row>\r\n//           <div className=\"col\">\r\n//             <Card className=\"shadow\">\r\n//               <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\">\r\n//                 <h3 className=\"mb-0\">Clients</h3>\r\n//                 <input type=\"file\" onChange={handleFileUpload} accept=\".csv\" style={{ display: 'none' }} ref={inputFileRef} />\r\n// <Button color=\"info\" onClick={() => inputFileRef.current && inputFileRef.current.click()}>\r\n//   Importer Clients\r\n// </Button>\r\n//                 {/* <Button color=\"primary\" onClick={toggleModal}>Ajouter Client</Button> */}\r\n//                 <Button color=\"primary\" onClick={handleAddClient}>Ajouter Client</Button>\r\n//               </CardHeader>\r\n              \r\n//               <CardBody>\r\n                \r\n//                 <ToolkitProvider\r\n//                   keyField=\"id\"\r\n//                   data={clients}\r\n//                   columns={columns}\r\n//                   search\r\n//                 >\r\n//                   {props => (\r\n//                     <div>\r\n                      \r\n//                       <SearchBar {...props.searchProps} style={{ border: '1px solid black' }} />\r\n//                       <div style={{ overflowX: 'auto' }}>\r\n//                         <BootstrapTable\r\n//                           {...props.baseProps}\r\n//                           ref={componentRef}\r\n//                           bootstrap4\r\n//                           pagination={pagination}\r\n//                           bordered={false}\r\n//                         />\r\n//                       </div>\r\n//                     </div>\r\n//                   )}\r\n//                 </ToolkitProvider>\r\n//               </CardBody>\r\n//             </Card>\r\n//           </div>\r\n//         </Row>\r\n//       </Container>\r\n//       {/* <AddClientModal isOpen={modal} toggle={toggleModal} onSave={addNewClient} /> */}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n// export default Tables;"]},"metadata":{},"sourceType":"module"}