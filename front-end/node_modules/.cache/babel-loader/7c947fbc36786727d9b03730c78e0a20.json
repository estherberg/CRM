{"ast":null,"code":"import _slicedToArray from \"C:/Users/esthe/OneDrive/Desktop/Projet Code/Ouieqare-MERN - Copie/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\esthe\\\\OneDrive\\\\Desktop\\\\Projet Code\\\\Ouieqare-MERN - Copie\\\\front-end\\\\src\\\\views\\\\examples\\\\ClientStatusPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { Container, Row, Card, CardHeader, CardBody } from \"reactstrap\";\nimport Header from \"components/Headers/Header.js\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min\";\n\nvar ClientStatusPage = function ClientStatusPage() {\n  _s();\n\n  var _useParams = useParams(),\n      status = _useParams.status; // Récupérer le statut de l'URL\n\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      clients = _useState2[0],\n      setClients = _useState2[1]; // État pour stocker les clients\n\n\n  var history = useHistory();\n  var totalClients = clients.length; // Nombre total de clients affichés\n\n  useEffect(function () {\n    fetchClientsByStatus(status, setClients); // Appel API pour récupérer les clients selon le statut\n  }, [status]); // Cette fonction doit être définie pour récupérer les clients en fonction du statut\n\n  var fetchClientsByStatus = function fetchClientsByStatus(status, setClients) {\n    // Vous devez implémenter cette fonction pour qu'elle fasse une requête API ou filtre les données localement\n    console.log(\"Fetching clients with status:\", status); // Ici, un exemple fictif de filtrage basé sur des données locales ou une requête API\n    //const filteredClients = MOCK_DATA.filter(client => client.statut === status);\n\n    setClients(filteredClients);\n  };\n\n  var columns = [// Vos colonnes ici, similaires à celles dans la page Clients\n  ];\n  var tablePagination = paginationFactory({\n    page: 1,\n    sizePerPage: 10,\n    lastPageText: '>>',\n    firstPageText: '<<',\n    nextPageText: '>',\n    prePageText: '<',\n    showTotal: true,\n    alwaysShowAllBtns: true,\n    onPageChange: function onPageChange(page, sizePerPage) {\n      console.log('page', page);\n      console.log('sizePerPage', sizePerPage);\n    },\n    onSizePerPageChange: function onSizePerPageChange(page, sizePerPage) {\n      console.log('page', page);\n      console.log('sizePerPage', sizePerPage);\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    className: \"mt--7\",\n    fluid: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"shadow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    className: \"border-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    className: \"mb-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, \"Clients avec le statut: \", status)), /*#__PURE__*/React.createElement(CardBody, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ToolkitProvider, {\n    keyField: \"id\",\n    data: clients,\n    columns: columns,\n    search: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, function (props) {\n    return /*#__PURE__*/React.createElement(BootstrapTable, Object.assign({}, props.baseProps, {\n      pagination: tablePagination,\n      bordered: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }));\n  })))))));\n};\n\n_s(ClientStatusPage, \"i8T/5MXmKMdBgjeRJWSn2kkQN2A=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = ClientStatusPage;\nexport default ClientStatusPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientStatusPage\");","map":{"version":3,"sources":["C:/Users/esthe/OneDrive/Desktop/Projet Code/Ouieqare-MERN - Copie/front-end/src/views/examples/ClientStatusPage.js"],"names":["React","useState","useEffect","useParams","useHistory","Container","Row","Card","CardHeader","CardBody","Header","BootstrapTable","paginationFactory","ToolkitProvider","ClientStatusPage","status","clients","setClients","history","totalClients","length","fetchClientsByStatus","console","log","filteredClients","columns","tablePagination","page","sizePerPage","lastPageText","firstPageText","nextPageText","prePageText","showTotal","alwaysShowAllBtns","onPageChange","onSizePerPageChange","props","baseProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,kBAAtC;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,YAA3D;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,eAAP,MAA4B,wEAA5B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA;;AAAA,mBACVX,SAAS,EADC;AAAA,MACrBY,MADqB,cACrBA,MADqB,EACG;;;AADH,kBAECd,QAAQ,CAAC,EAAD,CAFT;AAAA;AAAA,MAEtBe,OAFsB;AAAA,MAEbC,UAFa,kBAEe;;;AAC5C,MAAMC,OAAO,GAAGd,UAAU,EAA1B;AACA,MAAMe,YAAY,GAAGH,OAAO,CAACI,MAA7B,CAJ6B,CAIQ;;AAErClB,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,oBAAoB,CAACN,MAAD,EAASE,UAAT,CAApB,CADc,CAC4B;AAC3C,GAFQ,EAEN,CAACF,MAAD,CAFM,CAAT,CAN6B,CAU7B;;AACA,MAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACN,MAAD,EAASE,UAAT,EAAwB;AACnD;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CR,MAA7C,EAFmD,CAGnD;AACA;;AACAE,IAAAA,UAAU,CAACO,eAAD,CAAV;AACD,GAND;;AAQA,MAAMC,OAAO,GAAG,CACd;AADc,GAAhB;AAIA,MAAMC,eAAe,GAAGd,iBAAiB,CAAC;AACxCe,IAAAA,IAAI,EAAE,CADkC;AAExCC,IAAAA,WAAW,EAAE,EAF2B;AAGxCC,IAAAA,YAAY,EAAE,IAH0B;AAIxCC,IAAAA,aAAa,EAAE,IAJyB;AAKxCC,IAAAA,YAAY,EAAE,GAL0B;AAMxCC,IAAAA,WAAW,EAAE,GAN2B;AAOxCC,IAAAA,SAAS,EAAE,IAP6B;AAQxCC,IAAAA,iBAAiB,EAAE,IARqB;AASxCC,IAAAA,YAAY,EAAE,sBAAUR,IAAV,EAAgBC,WAAhB,EAA6B;AACzCN,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBI,IAApB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BK,WAA3B;AACD,KAZuC;AAaxCQ,IAAAA,mBAAmB,EAAE,6BAAUT,IAAV,EAAgBC,WAAhB,EAA6B;AAChDN,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBI,IAApB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BK,WAA3B;AACD;AAhBuC,GAAD,CAAzC;AAmBA,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAC,OAArB;AAA6B,IAAA,KAAK,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAA8Cb,MAA9C,CADF,CADF,eAIE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,eAAD;AAAiB,IAAA,QAAQ,EAAC,IAA1B;AAA+B,IAAA,IAAI,EAAEC,OAArC;AAA8C,IAAA,OAAO,EAAES,OAAvD;AAAgE,IAAA,MAAM,MAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,UAAAY,KAAK;AAAA,wBACJ,oBAAC,cAAD,oBACMA,KAAK,CAACC,SADZ;AAEE,MAAA,UAAU,EAAEZ,eAFd;AAGE,MAAA,QAAQ,EAAE,KAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADI;AAAA,GADR,CADF,CAJF,CADF,CADF,CADF,CAFF,CADF;AA2BD,CArED;;GAAMZ,gB;UACeX,S,EAEHC,U;;;KAHZU,gB;AAuEN,eAAeA,gBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport { Container, Row, Card, CardHeader, CardBody } from \"reactstrap\";\r\nimport Header from \"components/Headers/Header.js\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\r\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min\";\r\n\r\nconst ClientStatusPage = () => {\r\n  const { status } = useParams(); // Récupérer le statut de l'URL\r\n  const [clients, setClients] = useState([]); // État pour stocker les clients\r\n  const history = useHistory();\r\n  const totalClients = clients.length; // Nombre total de clients affichés\r\n\r\n  useEffect(() => {\r\n    fetchClientsByStatus(status, setClients); // Appel API pour récupérer les clients selon le statut\r\n  }, [status]);\r\n\r\n  // Cette fonction doit être définie pour récupérer les clients en fonction du statut\r\n  const fetchClientsByStatus = (status, setClients) => {\r\n    // Vous devez implémenter cette fonction pour qu'elle fasse une requête API ou filtre les données localement\r\n    console.log(\"Fetching clients with status:\", status);\r\n    // Ici, un exemple fictif de filtrage basé sur des données locales ou une requête API\r\n    //const filteredClients = MOCK_DATA.filter(client => client.statut === status);\r\n    setClients(filteredClients);\r\n  };\r\n\r\n  const columns = [\r\n    // Vos colonnes ici, similaires à celles dans la page Clients\r\n  ];\r\n\r\n  const tablePagination = paginationFactory({\r\n    page: 1,\r\n    sizePerPage: 10,\r\n    lastPageText: '>>',\r\n    firstPageText: '<<',\r\n    nextPageText: '>',\r\n    prePageText: '<',\r\n    showTotal: true,\r\n    alwaysShowAllBtns: true,\r\n    onPageChange: function (page, sizePerPage) {\r\n      console.log('page', page);\r\n      console.log('sizePerPage', sizePerPage);\r\n    },\r\n    onSizePerPageChange: function (page, sizePerPage) {\r\n      console.log('page', page);\r\n      console.log('sizePerPage', sizePerPage);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <div className=\"col\">\r\n            <Card className=\"shadow\">\r\n              <CardHeader className=\"border-0\">\r\n                <h3 className=\"mb-0\">Clients avec le statut: {status}</h3>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <ToolkitProvider keyField=\"id\" data={clients} columns={columns} search>\r\n                  {props => (\r\n                    <BootstrapTable\r\n                      {...props.baseProps}\r\n                      pagination={tablePagination}\r\n                      bordered={false}\r\n                    />\r\n                  )}\r\n                </ToolkitProvider>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClientStatusPage;\r\n"]},"metadata":{},"sourceType":"module"}